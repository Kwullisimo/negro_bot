from aiogram import types
from handlers.process_start import process_start
import keyboards
from utils import anti_flood, dispatcher
from keyboards.keyboards import add_back_button
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
import states.select_skin
import database
import asyncio
import json


dp = dispatcher.dp
bot = dispatcher.bot
flood = anti_flood.anti_flood

@dp.throttled(flood, rate=1)
async def get_inventory(message: types.Message):
    user = message.from_user
    chat = message.chat

    if chat.type != 'private':
        del_msg1 = await message.reply('–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤ –ª—Å –±–æ—Ç–∞.')
        await asyncio.sleep(5)
        await del_msg1.delete()
        try:
            await bot.delete_message(chat.id, message.message_id)

        except:
            pass

    else:
        await database.create_inventory_table()

        returned_inventory = await database.select_inventory_user(user.id)

        if returned_inventory is None:
            await message.reply('–ù—É —Ç—ã –±–æ—Ç—è—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ, –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–∏–Ω–∞.')
        
        else:
            inventory = json.loads(returned_inventory[0])

            str = ''

            for x in inventory:
                skin = await database.select_skin(x)
                skin = skin[0]
                str = str + skin + ' *[ ' + x + ' ]*\n\n'

            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)
            btn1 = KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Å–∫–∏–Ω')
            keyboard.add(btn1)
            await add_back_button(keyboard)

            await message.reply(f'*–í—Å–µ —Ç–≤–æ–∏ —Å–∫–∏–Ω—ã* (–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö –µ–≥–æ ID):\n\n{str}', parse_mode='Markdown', reply_markup=keyboard)

@dp.throttled(flood, rate=1)
async def choose_ext_skin(message: types.Message):
    user = message.from_user
    chat = message.chat

    if chat.type != 'private':
        del_msg1 = await message.reply('–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤ –ª—Å –±–æ—Ç–∞.')
        await asyncio.sleep(5)
        await del_msg1.delete()
        try:
            await bot.delete_message(chat.id, message.message_id)

        except:
            pass

    else:
        await database.create_inventory_table()

        returned_inventory = await database.select_inventory_user(user.id)

        if returned_inventory is None:
            await message.reply('–ö–∞–∫–æ–π –≤—ã–±–∏—Ä–∞—Ç—å, —É —Ç–µ–±—è –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫–∏–Ω–∞, –∞—Ö–∞—Ö üòÅ')

        else:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)
            await add_back_button(keyboard)
            await message.reply('–í–≤–µ–¥–∏ ID —Å–∫–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å: ', reply_markup=keyboard)
            await states.select_skin.select_ext_skin_state.STATE_1.set()

async def ext_skin_set(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    returned_inventory = await database.select_inventory_user(user.id)
    inventory = json.loads(returned_inventory[0])

    if message.text not in inventory:
        await message.reply('–≠—Ç–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ—Ç —É –≤–∞—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –ª–∏–±–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–ª–∏ –µ–≥–æ ID, –Ω–µ–≥—Ä–∏–ª–ª–∞ —Ç—ã —Ç–∞–∫–∞—è –≤—Ä–æ–¥–µ –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É–µ—à—å—Å—è, –∞ –ø–∏—Å–∞—Ç—å —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è))')
        await state.finish()
        await asyncio.sleep(2)
        await process_start(message)

    else:
        await database.update_skin_color_bot_db(user.id, message.text)
        await message.reply(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–∫—É—â–∏–π –æ—Ç—á–∏–º: *{message.text}*', parse_mode='Markdown')
        await state.finish()
        await asyncio.sleep(2)
        await process_start(message)