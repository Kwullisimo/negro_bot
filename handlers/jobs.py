import asyncio
from utils.dispatcher import dp
from utils.anti_flood import anti_flood
from aiogram import types
import database
from keyboards.keyboards import add_back_button, add_jobs_button, add_start_keyboard
from utils.dispatcher import bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from states.choose_job import choose_your_job
from aiogram.dispatcher import FSMContext
import random
from time import sleep

@dp.throttled(anti_flood, rate=1)
async def show_works(message: types.Message):
    user = message.from_user
    chat = message.chat

    if chat.type != 'private':
        del_msg = await message.reply('–¢–æ–ª—å–∫–æ –≤ –õ–° üòÅ')
        await asyncio.sleep(5)
        await del_msg.delete()

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)

        await database.create_jobs_table()
        await database.create_welder_table()
        await database.create_warning_table()
        await database.create_taxi_table()

        button_leave_job = KeyboardButton('–£–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã')

        await add_jobs_button(keyboard)

        returned_user = await database.select_user_from_jobs(user.id)
        if returned_user is not None:
            keyboard.add(button_leave_job)

        await add_back_button(keyboard)

        await message.reply('*–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç:*', reply_markup=keyboard, parse_mode='MarkdownV2')
        await choose_your_job.STATE_1.set()

async def welder_job(message: types.Message):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)
    dungeon = False
    try:
        returned_user = returned_user[0]

    except:
        dungeon = True

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)
    btn1 = KeyboardButton('–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–µ–≥—Ä–æ-–≤–∞—Ä—â–∏–∫–æ–º')
    btn2 = KeyboardButton('–†–∞–±–æ—Ç–∞—Ç—å')

    if returned_user != 'welder' or dungeon == True:
        keyboard.add(btn1)

    else:
        keyboard.add(btn2)

    await add_back_button(keyboard)

    await message.reply('*–†–∞–±–æ—Ç–∞ —Å–≤–∞—Ä—â–∏–∫–∞:*\n\n–ö–æ—Ä–æ—á–µ –±–µ—Ä–µ—à—å —Å–≤–∞—Ä–æ—á–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –∏ –≤–∞—Ä–∏—à—å —Ç—Ä—É–±—ã, –∑–∞ *45 —Å–µ–∫—É–Ω–¥* –¥–∞—é—Ç *–æ—Ç 1 –¥–æ 20 —Ä—É–±–ª–µ–π*.', reply_markup=keyboard, parse_mode='Markdown')
    await choose_your_job.WELDER_CHOOSE.set()

async def enter_the_welder(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)

    create_welder = False
    welder_user = await database.select_welder_user(user.id)
    if welder_user is None:
        create_welder = True

    if returned_user is None:
        job = 'welder'
        job_name = '–°–≤–∞—Ä—â–∏–∫'
        await database.replace_into_jobs(user.id, job, job_name)
        if create_welder == True:
            uses = 0
            await database.replace_into_welder(user.id, uses)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)

        await message.reply('–¢–µ–ø–µ—Ä—å —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–µ–≥—Ä–æ-—Å–≤–∞—Ä—â–∏–∫–æ–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏ *—Ä–∞–±–æ—Ç—ã -> —Å–≤–∞—Ä—â–∏–∫*.', reply_markup=keyboard, parse_mode='Markdown')
        await state.finish()
    
    else:
        keybard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keybard)
        
        await message.reply(f'–ù–µ–≥—Ä–æ–Ω–∞—Ç –Ω–∞—Ç—Ä–∏—è, —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—à—å, –∫–æ—Ä–æ—á–µ —É–≤–æ–ª—å—Å—è –∏ –≤—Å–µ.', reply_markup=keybard)
        await state.finish()
        return False

async def welder_start_working(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)

    try:
        returned_user = returned_user[0]

    except:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)
        await message.reply('–ù–∞ —Ä–∞–±–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—è –º—É–¥–∏–ª–∞!', reply_markup=keyboard)
        await state.finish()
        return False

    if returned_user != 'welder':
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)

        await message.reply('–°–æ–≤–µ—Ç—É—é —Ç–∏–±–µ –Ω–∞—Ñ–µ–∫ –ø–æ–π—Ç–∏ —Å —Ç–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏, —É—Å—Ç—Ä–æ–π—Å—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É, –±–æ–º–∂–∞—Ä–∞ –Ω–∏—â–∏–π))', reply_markup=keyboard)
        await state.finish()

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        btn1 = ('–í–∞—Ä–∏—Ç—å —Ç—Ä—É–±—É')
        keyboard.add(btn1)
        await add_back_button(keyboard)
        await message.reply('–ù–∞—á–∏–Ω–∞–π –≤–∞—Ä–∏—Ç—å —Ç—Ä—É–±—ã', reply_markup=keyboard)
        await choose_your_job.WELDER_WORKING.set()

async def welder_working(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
    btn1 = ('–í–∞—Ä–∏—Ç—å —Ç—Ä—É–±—É')
    keyboard.add(btn1)
    await add_back_button(keyboard)

    await message.reply('–ñ–¥–∏ 45 —Å–µ–∫—É–Ω–¥.')
    await state.finish()
    sost = False
    await database.replace_warning(user.id, sost)
    await asyncio.sleep(45)
    sost = True
    await database.replace_warning(user.id, sost)

    rand_money = random.randint(1, 20)

    welder_uses = await database.select_welder_uses(user.id)
    uses = welder_uses[0] + 1
    returned_user = await database.return_user_from_bot_db(user.id)
    returned_user = returned_user[0]
    balance = returned_user[2] + rand_money

    await database.replace_into_welder(user.id, uses)
    await database.update_balance_bot(user.id, balance)

    await bot.send_message(chat.id, f'–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: *{rand_money} —Ä—É–±*. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: *{balance} —Ä—É–±*. –†–∞–±–æ—Ç–∞–π –¥–∞–ª—å—à–µ –Ω–µ–≥—Ä–∏–ª–ª–∞!', reply_markup=keyboard, parse_mode='Markdown')
    await choose_your_job.WELDER_WORKING.set()

async def taxi_job(message: types.Message):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)
    dungeon = False
    try:
        returned_user = returned_user[0]

    except:
        dungeon = True

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)
    btn1 = KeyboardButton('–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–µ–≥—Ä–æ-—Ç–∞–∫—Å–∏—Å—Ç–æ–º')
    btn2 = KeyboardButton('–†–∞–±–æ—Ç–∞—Ç—å')

    if returned_user != 'taxi' or dungeon == True:
        keyboard.add(btn1)

    else:
        keyboard.add(btn2)

    await add_back_button(keyboard)

    await message.reply('*–†–∞–±–æ—Ç–∞ —Ç–∞–∫—Å–∏—Å—Ç–∞:*\n\n–ê—Ä–∏–Ω–¥—É–µ—à—å –º–∞—à—ã–Ω—É, —Å–∞–¥–∏—à—å—Å—è –±–∏–ø-–±–∏–ø –ø–∞–∏—Ö–∞–ª–∏, –ø–ª–∞—Ç—è—Ç –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ —Å–≤–∞—Ä—â–∏–∫–µ, –Ω–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —É–±–µ–∂–∞—Ç—å –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–≤! –ó–∞—Ä–ø–ª–∞—Ç–∞: *–æ—Ç 25 –¥–æ 70 —Ä—É–±–ª–µ–π* –∑–∞ –∑–∞–∫–∞–∑.', reply_markup=keyboard, parse_mode='Markdown')
    await choose_your_job.TAXI_CHOOSE.set()

async def enter_the_taxi(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)

    create_taxi = False
    taxi_user = await database.select_taxi_user(user.id)
    if taxi_user is None:
        create_taxi = True

    if returned_user is None:
        job = 'taxi'
        job_name = '–ù–µ–≥—Ä–æ-—Ç–∞–∫—Å–∏—Å—Ç'
        await database.replace_into_jobs(user.id, job, job_name)
        if create_taxi == True:
            uses = 0
            await database.replace_into_taxi(user.id, uses)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)

        await message.reply('–¢–µ–ø–µ—Ä—å —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–µ–≥—Ä–æ-—Ç–∞–∫—Å–∏—Å—Ç–æ–º, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏ *—Ä–∞–±–æ—Ç—ã -> —Ç–∞–∫—Å–∏—Å—Ç*.', reply_markup=keyboard, parse_mode='Markdown')
        await state.finish()
    
    else:
        keybard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keybard)
        
        await message.reply(f'–ù–µ–≥—Ä–æ–Ω–∞—Ç –Ω–∞—Ç—Ä–∏—è, —Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—à—å, –∫–æ—Ä–æ—á–µ —É–≤–æ–ª—å—Å—è –∏ –≤—Å–µ.', reply_markup=keybard)
        await state.finish()
        return False

async def taxi_start_working(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    returned_user = await database.select_user_from_jobs(user.id)

    try:
        returned_user = returned_user[0]

    except:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)
        await message.reply('–ù–∞ —Ä–∞–±–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—è –º—É–¥–∏–ª–∞!', reply_markup=keyboard)
        await state.finish()
        return False

    if returned_user != 'taxi':
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        await add_start_keyboard(keyboard)

        await message.reply('–°–æ–≤–µ—Ç—É—é —Ç–∏–±–µ –Ω–∞—Ñ–µ–∫ –ø–æ–π—Ç–∏ —Å —Ç–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏, —É—Å—Ç—Ä–æ–π—Å—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É, –±–æ–º–∂–∞—Ä–∞ –Ω–∏—â–∏–π))', reply_markup=keyboard)
        await state.finish()

    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
        btn1 = ('–í–æ–∑–∏—Ç—å –±–∏—á–µ–π')
        keyboard.add(btn1)
        await add_back_button(keyboard)
        await message.reply('–ù–∞—á–∏–Ω–∞–π –≤–æ–∑–∏—Ç—å –Ω–µ–≥—Ä–æ–Ω–∞—Ç–æ–≤', reply_markup=keyboard)
        await choose_your_job.TAXI_WORKING.set()

async def taxi_working(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, selective=True)
    btn1 = ('–í–æ–∑–∏—Ç—å –±–∏—á–µ–π')
    keyboard.add(btn1)
    await add_back_button(keyboard)

    random_time = random.randint(20, 150)
    random_l = random.randint(3, 25)
    kidok = random.randint(1, 100)

    if kidok > 60:
        kidok = True

    else:
        kidok = False

    await message.reply(f'–í–∞–º –µ—Ö–∞—Ç—å: *{random_l} –∫–º*. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: *{random_time} —Å–µ–∫*.', parse_mode='Markdown')
    await state.finish()
    sost = False
    await database.replace_warning(user.id, sost)
    await asyncio.sleep(random_time)
    sost = True
    await database.replace_warning(user.id, sost)

    if kidok == True:
        await bot.send_message(chat.id, '*–í–∞—Å –∫–∏–Ω—É–ª–∏, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏! ü§¨*', reply_markup=keyboard, parse_mode='Markdown')
        await choose_your_job.TAXI_WORKING.set()

    else:    

        rand_money = random.randint(25, 70)

        taxi_uses = await database.select_taxi_uses(user.id)
        uses = taxi_uses[0] + 1
        returned_user = await database.return_user_from_bot_db(user.id)
        returned_user = returned_user[0]
        balance = returned_user[2] + rand_money

        await database.replace_into_taxi(user.id, uses)
        await database.update_balance_bot(user.id, balance)

        await bot.send_message(chat.id, f'–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: *{rand_money} —Ä—É–±*. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: *{balance} —Ä—É–±*. –†–∞–±–æ—Ç–∞–π –¥–∞–ª—å—à–µ –Ω–µ–≥—Ä–∏–ª–ª–∞!', reply_markup=keyboard, parse_mode='Markdown')
        await choose_your_job.TAXI_WORKING.set()

async def leave_from_job(message: types.Message, state: FSMContext):
    user = message.from_user
    chat = message.chat

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=True)
    await add_start_keyboard(keyboard)

    returned_user = await database.select_user_from_jobs(user.id)
    if returned_user is None:
        await message.reply('–¢—ã —á–µ, –Ω–µ–≥—Ä–∏–ª–ª–∞ —Ç–∞–∫–∞—è, —É—Å—Ç—Ä–æ–π—Å—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ –Ω–µ–µ! ü§°', reply_markup=keyboard)
        await state.finish()
    
    else:
        await state.finish()
        await database.delete_user_from_jobs(user.id)
        await message.reply('*–í—ã –±—ã–ª–∏ —É–≤–æ–ª–µ–Ω—ã —Å —Ä–∞–±–æ—Ç—ã!* üíº', reply_markup=keyboard, parse_mode='Markdown')